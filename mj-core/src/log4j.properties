######################################################
# log4j需要jar文件：log4j.jar, commons-logging.jar
# 使用方法：static Logger logger = Logger.getLogger(MyApp.class.getName());
#
# 首先，是设置root，格式为 log4j.rootLogger=[level],appenderName, ...，
# 其中level就是设置需要输出信息的级别，后面是appender的输出的目的地，
# appenderName就是指定日志信息输出到哪个地方。您可以同时指定多个输出目的地。
#
# 其中，Log4j提供的appender有以下几种：
# org.apache.log4j.ConsoleAppender(控制台)
# org.apache.log4j.FileAppender(文件)
# org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)
# org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件)
# org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)
#
#(1).ConsoleAppender选项
#Threshold=WARN:指定日志消息的输出最低层次。
#ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
#Target=System.err：默认情况下是：System.out,指定输出控制台
#
#(2).FileAppender 选项
#Threshold=WARN:指定日志消息的输出最低层次。
#ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
#File=mylog.txt:指定消息输出到mylog.txt文件。
#Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
#
#(3).DailyRollingFileAppender 选项
#Threshold=WARN:指定日志消息的输出最低层次。
#ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
#File=mylog.txt:指定消息输出到mylog.txt文件。
#Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
#DatePattern=’.'yyyy-ww:每周滚动一次文件，即每周产生一个新的文件。当然也可以指定按月、周、天、时和分。即对应的格式如下：
#1)’.'yyyy-MM: 每月
#2)’.'yyyy-ww: 每周
#3)’.'yyyy-MM-dd: 每天
#4)’.'yyyy-MM-dd-a: 每天两次
#5)’.'yyyy-MM-dd-HH: 每小时
#6)’.'yyyy-MM-dd-HH-mm: 每分钟
#
#(4).RollingFileAppender 选项
#Threshold=WARN:指定日志消息的输出最低层次。
#ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
#File=mylog.txt:指定消息输出到mylog.txt文件。
#Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
#MaxFileSize=100KB: 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
#MaxBackupIndex=2:指定可以产生的滚动文件的最大数。
#
#3. 配置日志信息的布局，其语法为：
#log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class
#log4j.appender.appenderName.layout.option1 = value1
#…
#log4j.appender.appenderName.layout.optionN = valueN
#其中，Log4j提供的layout有以下几种：
#org.apache.log4j.HTMLLayout(以HTML表格形式布局)
#org.apache.log4j.PatternLayout(可以灵活地指定布局模式)
#org.apache.log4j.SimpleLayout(包含日志信息的级别和信息字符串)
#org.apache.log4j.TTCCLayout(包含日志产生的时间、线程、类别等等信息)
#
#4、输出格式设置
#在配置文件中可以通过log4j.appender.A1.layout.ConversionPattern设置日志输出格式。
#参数：
#%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
#%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss}，输出类似：2012-02-01 10:10:28
#%r: 输出自应用启动到输出该log信息耗费的毫秒数
#%c: 输出日志信息所属的类目，通常就是所在类的全名
#%t: 输出产生该日志事件的线程名
#%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
#%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
#%%: 输出一个”%”字符
#%F: 输出日志消息产生时所在的文件名称
#%L: 输出代码中的行号
#%m: 输出代码中指定的消息,产生的日志具体信息
#%n: 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行
#可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
#1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
#2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，”-”号指定左对齐。
#3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
#4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。
#
#######################################################

#设置日志的输出级别，及输出目的地
log4j.rootLogger=DEBUG, console, debug, info, error

#console输出到控制台 
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=<%d{yyyy-MM-dd HH:mm:ss}> <%p> [%F:%L] - %m%n

#每天产生一个日志文件debug.log，记录debug级系统日志
log4j.appender.debug=org.apache.log4j.DailyRollingFileAppender
log4j.appender.debug.File=../logs/debug.log
log4j.appender.debug.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.debug.ImmediateFlush=true
log4j.appender.debug.Append=true
log4j.appender.debug.Threshold=DEBUG
log4j.appender.debug.layout=org.apache.log4j.PatternLayout
log4j.appender.debug.layout.ConversionPattern=<%d{yyyy-MM-dd HH:mm:ss}> <%p> [%F:%L] - %m%n

#每天产生一个日志文件info.log，记录info级系统日志
log4j.appender.info=org.apache.log4j.DailyRollingFileAppender
log4j.appender.info.File=../logs/info.log
log4j.appender.info.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.info.ImmediateFlush=true
log4j.appender.info.Append=true
log4j.appender.info.Threshold=INFO
log4j.appender.info.layout=org.apache.log4j.PatternLayout
log4j.appender.info.layout.ConversionPattern=<%d{yyyy-MM-dd HH:mm:ss}> <%p> [%F:%L] - %m%n

#每天产生一个日志文件error.log，记录error级系统日志
log4j.appender.error=org.apache.log4j.DailyRollingFileAppender
log4j.appender.error.File=../logs/error.log
log4j.appender.error.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.error.ImmediateFlush=true
log4j.appender.error.Append=true
log4j.appender.error.Threshold=ERROR
log4j.appender.error.layout=org.apache.log4j.PatternLayout
log4j.appender.error.layout.ConversionPattern=<%d{yyyy-MM-dd HH:mm:ss}> <%p> [%l] - %m%n
